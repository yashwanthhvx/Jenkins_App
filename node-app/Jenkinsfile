pipeline {
  agent any

  parameters {
    choice(name: 'DEPLOYMENT_TYPE', choices: ['Docker-Compose', 'Kubernetes'], description: 'Choose the deployment type')
    string(name: 'TARGET_BRANCH', defaultValue: 'stage', description: 'Specify the target branch')
  }

  stages {
    stage('Build') {
      parallel {
        stage('Jenkins') {
          steps {
            git branch: "stage", url: 'https://github.com/yashwanthhvx/Node_App.git'
          }
        }

        stage('sourcecode') {
          steps {
            echo "Executing from branch: ${env.BRANCH_NAME}"
          }
        }
      }
    }

    stage('Prepare') {
      steps {
        sh "sudo cp -R /var/lib/jenkins/workspace/Jenkins_App_stage/node-app/* /var/lib/jenkins/workspace/Node_App_${params.TARGET_BRANCH}/Node-App/."
      }
    }

    stage('Deploy') {
      parallel {
        stage('Build Image') {
          steps {
            dir('Node-App') {
              sh 'sudo docker build -t node-app-stage:latest .'
              sh 'sudo docker run -d -p 80:3000 --name node-app-stage node-app-stage:latest'
            }
          }
        }

        stage('Docker Push') {
          steps {
            dir('Node-App') {
              sh 'sudo bash docker-credentials.sh'
              sh 'sudo docker tag node-app-stage:latest hvxuser/node-app-stage'
              sh 'sudo docker push hvxuser/node-app-stage'
            }
          }
        }

        stage('Docker-Compose') {
          when {
            expression { params.DEPLOYMENT_TYPE == 'Docker-Compose' }
          }
          steps {
            dir('Node-App') {
              sh 'sudo docker-compose up -d'
            }
          }
        }

        stage('K8-Deploy') {
          when {
            expression { params.DEPLOYMENT_TYPE == 'Kubernetes' }
          }
          steps {
            dir('Node-App') {
              script {
                def deployCmd = 'sudo kubectl apply -f k8-deployment.yml'
                def deployStatus = sh(script: deployCmd, returnStatus: true)

                if (deployStatus == 0) {
                  echo 'Kubernetes deployment succeeded'
                } else {
                  echo 'Kubernetes deployment failed'
                  currentBuild.result = 'FAILURE'
                }
              }
            }
          }
        }
      }
    }
  }
}
